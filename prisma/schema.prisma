generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider     = "postgresql"
//   url          = env("DATABASE_URL")
//   // relationMode = "prisma"
// }

// model Guestbook {
//   id         String   @id @default(uuid())
//   message    String
//   username   String
//   created_at DateTime @default(now())
// }

// prisma/schema.prisma

// datasource db {
// provider = "postgresql"
// url  	= env("DATABASE_URL")
// directUrl = env("DIRECT_URL")
// If you want to use Prisma Migrate, you will need to manually create a shadow database
// https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
// make sure to append ?connect_timeout=10 to the connection string
// shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Guestbook {
  id         String   @id @default(uuid())
  message    String
  username   String?
  email      String?
  created_at DateTime @default(now())
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
